#!/usr/bin/env python

import asyncio
import json
import logging
import secrets
import websockets

from web_tabletop.db import get_db

logging.basicConfig()

TABLETOPS = {}
# "tabletop_token": { "state": {}, "users": set() }
STATE = {
    "value": 0,
}

USERS = set()


def create_tabletop():
    pass

def delete_tabletop():
    pass

def state_event():
    return json.dumps({"type": "state", **STATE})

def users_event():
    return json.dumps({"type": "users", "count": len(USERS)})

def counter_event():
    return json.dumps({"type": "state", "value": STATE["value"]})

def token_event(name):
    return json.dumps({"type": "state", name: STATE[name]})


async def notify_state():
    if USERS:  # asyncio.wait doesn't accept an empty list
        message = state_event()
        await asyncio.wait([user.send(message) for user in USERS])

async def notify_users():
    if USERS:  # asyncio.wait doesn't accept an empty list
        message = users_event()
        await asyncio.wait([user.send(message) for user in USERS])

async def notify_counter():
    if USERS:
        message = counter_event()
        await asyncio.wait([user.send(message) for user in USERS])

async def notify_token(name):
    if USERS:
        message = token_event(name)
        await asyncio.wait([user.send(message) for user in USERS])


async def register(websocket):
    USERS.add(websocket)
    await notify_users()

async def unregister(websocket):
    USERS.remove(websocket)
    await notify_users()


async def machine(websocket, path):
    # register(websocket) sends user_event() to websocket
    await register(websocket)
    try:
        await websocket.send(state_event())
        async for message in websocket:
            data = json.loads(message)
            if data["action"] == "create":
                DOSTUFF
            elif data["action"] == "delete":
                DOSTUFF
            elif data["action"] == "update":
                token = data["token"]
                if not token in TABLETOPS:
                    logging.error("token not found")
            elif data["action"] == "minus":
                TABLETOPS[data["token"]]STATE["value"] -= 1
                await notify_counter()
            elif data["action"] == "plus":
                STATE["value"] += 1
                await notify_counter()
            elif data["action"] == "move":
                STATE[data["token"]] = data["target"]
                await notify_token(data["token"])
            elif data["action"] == "ping":
                await notify_state()
            else:
                logging.error("unsupported event: {}", data)
    finally:
        await unregister(websocket)


start_server = websockets.serve(machine, "127.0.0.1", 6789)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
